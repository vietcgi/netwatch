name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: netwatch ${{ steps.get_version.outputs.version }}
        body: |
          # netwatch ${{ steps.get_version.outputs.version }}
          
          A modern network traffic monitor for Unix systems.
          
          ## Changes in this release
          - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details
          
          ## Installation
          
          ### Binary Installation
          Download the appropriate binary for your system from the assets below.
          
          ### From Source
          ```bash
          cargo install netwatch
          ```
          
          ### Package Managers
          ```bash
          # macOS
          brew install netwatch
          
          # Linux (Arch)
          yay -S netwatch
          ```
          
          ## Usage
          ```bash
          # Monitor default interface
          netwatch
          
          # Monitor specific interface  
          netwatch eth0
          
          # Show all interfaces
          netwatch --list
          ```
        draft: false
        prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: netwatch
            asset_name: netwatch-linux-x86_64
            
          # Linux x86_64 (musl - static binary)  
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: netwatch
            asset_name: netwatch-linux-x86_64-musl
            
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: netwatch
            asset_name: netwatch-linux-arm64
            
          # Linux ARM64 (musl - static binary)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: netwatch
            asset_name: netwatch-linux-arm64-musl
            
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: netwatch
            asset_name: netwatch-macos-x86_64
            
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest  
            target: aarch64-apple-darwin
            artifact_name: netwatch
            asset_name: netwatch-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross (for cross-compilation)
      if: contains(matrix.target, 'musl') || contains(matrix.target, 'aarch64')
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Build release binary
      run: |
        if [[ "${{ matrix.target }}" == *"musl"* ]] || [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Strip binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Generate checksums and signatures
      run: |
        cd target/${{ matrix.target }}/release
        # Generate SHA256 checksum
        sha256sum ${{ matrix.artifact_name }} > ${{ matrix.asset_name }}.sha256
        # Generate SHA512 checksum for additional security
        sha512sum ${{ matrix.artifact_name }} > ${{ matrix.asset_name }}.sha512
        
    - name: Create tarball with checksums
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }} ${{ matrix.asset_name }}.sha256 ${{ matrix.asset_name }}.sha512
        
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-release]
    runs-on: macos-latest
    steps:
    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Checkout homebrew-tap repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/homebrew-tap
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        path: homebrew-tap
        
    - name: Update Homebrew formula
      run: |
        cd homebrew-tap
        # Update the formula with new version and checksums
        # This would be a script to update the .rb formula file
        echo "Homebrew formula update would happen here"
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        path: homebrew-tap
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        commit-message: "Update netwatch to ${{ steps.get_version.outputs.version }}"
        title: "Update netwatch to ${{ steps.get_version.outputs.version }}"
        body: |
          Automated update of netwatch formula to version ${{ steps.get_version.outputs.version }}
          
          This PR was automatically created by the release workflow.

  docker:
    name: Build and Push Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ github.repository_owner }}/netwatch
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha  
        cache-to: type=gha,mode=max